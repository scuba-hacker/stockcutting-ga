Class Descriptions:

Shape Class

Shape objects contain two pieces of data: the x-span and y-span describing a single rectangle. This data is
initialised when the object is created. As this data is 'protected', it cannot be read or changed directly from
outside the class. The public functions shape::height() and shape::width() return x-span and y-span values
respectively. The shape may be 'rotated' by 90 degrees by calling the shape::rotate_90() public function, which
swaps the x-span and y-span data. The overloaded insertion operator first reads the x-span value from a stream, skips 
white space and then reads the y-span value. The overloaded extraction operator outputs x-span, followed by a 
single comma and single space, followed by the y-span value.


Shape_l Class (inherits from Shape and Coord Classes)

Merges all properties of shape and coord classes. The result is that now a shape's dimensions and the coordinate 
of its top-left vertex may be stored in the new class. Shape_l class also adds the functions: top(), bot() (to
determine y-axis coordinates of top and bottom edges of shape); and left() and right() (which return x-axis coordinates 
of left and right edges of shape). The overloaded extraction operator outputs data to a stream in the format:

	(<x_position>,<y_position>):<x_size>, <y_size>;

The insertion operator inputs data in the same format.

Gene Class (Abstract Class - can't be instantiated itself)

Forms base class for all gene sub-types, eg shape_g. Has clone() and create() virtual functions for self-duplication.
Gene class contains no data, and cannot be instantiated. However, pointers to gene objects can be created and it is
these and not the gene base-type that are manipulated by the application.


Shape_g Class (inherits from Gene class)

This is a gene class that contains two pieces of 'protected data': 
	shape *p_piece			Points to a shape object, referred to as the 'tied shape'
	angle orientation		Orientation of shape, _0_degrees or _90_degrees

Public functions are provided to get/set both the tied shape and the orientation. height() and width() functions
return the dimensions of the tied shape, taking into account orientation. The clone() and create() functions in Gene
class are overrided with functions that enable shape_g objects to duplicate themselves. Overloaded insertion and
extraction operators use the following format:

	<shape data> <orientation>

Where:	<shape data> is the data pointed to by p_piece.
		<orientation> is one of : <0d> <90d>


Shape_g_l Class (inherits from shape_g class and coord class)

Merges all properties of shape_g and coord classes. The result is that shape_g_l contains a pointer to a shape, an
orientation and a coord object that locates the shape's top-left vertex. Shape_g_l class also adds the functions: top(),
bot() (to determine y-axis coordinates of top and bottom edges of rotated shape); and left() and right() (which return 
x-axis coordinates of left and right edges of rotated shape).


Shape_Group Class

Aggregate class which stores an array of shape objects. The size of the array is stored in 'sequence_size length'. The 
shape_group class provides an overloaded subscript operator to access array elements.The
shape_group object allows the length of the stored array to change through overloaded assignment and insertion operators.
The contained array is dynamically allocated, and its length is set to zero upon instantiation. The insertion operator
allows an entire array of shapes to be built from a stream. The format of the streamed data is:

<shape 1 data>, <shape 2 data>, ..., <shape n data>:

Where <shape data> format is "x-span y-span" as determined by the insertion operator for the shape class. Each set of
shape data is immediately followed by a single comma plus white space. The final set of shape data is immediately
followed by a 'non-comma single character', eg a colon.


The following algorithm is used to read a list of shapes from a stream:

1) Initialise shape count (i) to zero, store current byte position of input stream in 'shapes_start'.
2) Read in a single shape, followed by a single character from the input stream.
3) If the single char is a comma: increment shape count (i) and Goto (2); else Goto (4)
4) Set the shape_list pointer to point to a new array of (i) shapes.
5) Clear any EOF flag in input_stream, seek the 'shapes_start' byte offset of input stream, reset (i) to zero.
6) Read in a single shape (store in shape array element (i)), followed by a single character from the input stream.
7) If the single char is a comma: increment shape count (i) and Goto (6); else Goto (8)
8) shape_group now contains an array of (i+1) shapes storing valid x-span and y-span values.


Coord Class

Coord objects contain two public pieces of data: an x-position and a y-position. The overloaded insertion operator first
expects '(', x-position value, ',', y-position value, '):'. The overloaded extraction operator outputs in the
same format.


Coord_Group Class

Aggregate class which stores an array of coord objects, of constant size 'max_coord_list'.
The coord_group class provides an overloaded subscript operator to access array elements.


Edge_node Class

Edge_node objects are used as nodes in edge_lists, and each contains an indexing object consisting of a coord 
object (called 'hotspot'), a y_size_t object (called 'length') and an edge_node pointer. The class provides
set and get functions for the coord and y_size_t objects (and their components). The list class requires the
following functions to be provided by the node object:

get_index, set_index, get_data, set_data, set_to_first_index, set_to_next_index, compare_index, compare_data,
get_pointer, set_pointer_to.

where, in this case, 'index' refers to the coord object and 'data' refers to the y_size_t object. The comparison
functions have two parameters, which are index or data objects respectively, and return an enumeration of type
'compare' which can take on one of the following values: LARGER, EQUAL, SMALLER, so LARGER would mean the value of
the first parameter is larger than the second. These functions are required for list ordering.

Comparison between data items, ie 'y_size_t length' values uses a straightforward boolean expression.
Comparison between index items, ie 'coord hotspot' is more complex. A list which is being used to store a top 
profile orders its list nodes in increasing 'hotspot.x-position' order, whilst a list used to store a
left profile orders list nodes in increasing 'hotspot.y_position' order. The public static data member 'compare_method'
is a pointer to member-function which points to either compare_index_x or compare_index_y function.
Before operations on a left profile list, compare_method must be set to point to compare_index_y function,
and respectively when using a top profile list, compare_method must be set to point to compare_index_x function.
Compare_method is initialised to compare_index_y when the application begins. Compare_method is static to the edge_node
class, meaning that it is common to all edge_node objects.


Test_Set Class

Contains all data for a single layout test:

Member Variable			Purpose

char id[10]				Test identifier string
shape_group shapes		Stores an array of shapes for the test
char description[1000]	Freetext test descriptor
placement_rule rule		Determines placement regime of test shapes
x_size_t sheet_width	Width of macro sheet to layout test shapes onto
y_size_t sheet_height	Height of macro sheet to layout test shapes onto

The insertion operator reads data into these variables in the following format:

<id> <shape_group data> <test descriptor> <!> <rule_regime> <sheet_width> <sheet_height>


Notes:
1. each field <> is separated by white space
2. <id> is delimited by white space (max length is 9 chars)
3. <shape_group data> is read in by the shape_group class insertion operator in the relevant format
4. <test descriptor> (max length 1000 chars) may contain white space and is delimited by the single character <!>
5. <rule_regime> may be one of: <LEFTMOST> <TOPMOST> <FLIP_LEFT> <FLIP_TOP>
6. <sheet_width> and <sheet_height> and non-negative integers.

Test_Set_Group Class

Aggregate class which stores an array of test_set objects. The size of the array is stored in 'sequence_size length'. 
The test_set_group class provides an overloaded subscript operator to access array elements. The
test_set_group object allows the length of the stored array to change by use of the insertion operator.
The contained array is dynamically allocated, and its length is set to zero upon instantiation. The insertion operator
allows an entire array of test_sets to be built from a stream. The format of the streamed data is:

<test set 1> <test set 2> ... <test set n>

Where <test set> format is determined by the insertion operator for the test_set class, and each test is separated by
white space.

The following algorithm is used to read a list of test sets from a stream:

1) Initialise test set count to zero, store current byte position of input stream in 'test_sets_start'.
2) Read in a single test set from the input stream, increment count and if not EOF then Goto (2)
3) Set the test_list pointer to point to a new array of (count) test_sets.
4) Clear any EOF flag in input stream, seek the 'test_sets_start' byte offset of input stream, reset count to zero.
5) Read in a single test set (store in element (count) of test_sets array) from the input stream.
6) If not EOF, increment count and Goto (5).
7) test_list now contains an array of (count+1) test sets, each fully loaded with test data.


Chromosome Class (Abstract Class - can't be instantiated itself)

Forms base class for all chromosome sub-types, eg LDA_c. Chromosome objects are aggregate groups of ordered gene objects.
The chromosome class contains a pointer (gene **sequence) to an array of gene pointers, of length 'sequence_length_base'. 
These two variables are set to NULL and zero in the chromosome constructor. Classes derived from chromosome are
responsible for calling chromosome::generate_place_holders function, passing the length of chromosome required, within
their constructor functions. The chromosome class then allocates sufficient space for the array of gene pointers, and
sets sequence_length_base appropriately. The derived class is then responsible for allocating memory for the individual 
gene objects that are pointed to by the elements of this array. The chromosome class provides an overloaded subscript 
operator to access array elements. The class has clone() and create() virtual functions for self-duplication.
Chromosome class objects cannot be instantiated. However, pointers to gene objects can be created and it is
these and not the gene base-type that are manipulated by the application.


LDA_c Class (Inherits from chromosome class - specialises class for use in LDA environment)

This class allows an ordered sequence of shape_g gene objects to be stored in an array, and be manipulated as a generic
chromosome. The constructor is responsible for calling chromosome::generate_place_holders, passing the number of genes
required in the chromosome. This value is stored in a public static data member: LDA_length, and is common to all
LDA_c objects. The constructor then allocates memory for each shape_g, and stores its pointer in the chromosome gene**
array. In the copy constructor and overloaded assignment operators, the LDA_c::clone() member function is used to 
allocate memory and copy member data for new shape_g objects contained in the new LDA_c chromosome object.
The LDA_c class provides an overloaded subscript operator to access array elements.

Environment Class
Contains nothing for now

LDA_e Class (Inherits from environment class)

This class is a simple implementation of the Layout Determining Algorithm Environment for stock cutting. The placement
algorithm used is:

1.	Build columns of shapes from top to bottom and from left to right in the macro sheet.
2.	A column's width is determined by the widest shape placed in the column.
3.	Shapes cannot overlap within or between columns.
4.	If there is insufficient macro sheet space at the base of a column for the shape being placed, then start a new
	column.

LDA_e contains three public data members:
	static array_index max_layout_items;		:	Max number of shapes that can be laid out at once
	shape_g_l layout[100];						:	Stores the shape layout
	array_index next_index;						:	Index of layout array where next shape can be stored

LDA_e contains three protected data members:
	x_size_t macro_width;						:	width of macro sheet
	y_size_t macro_height;						:	width of macro height
	shape_group *shapes;						:	points to the group of shapes to be placed

The provide_shapes member function sets the shapes pointer to the shape_group that is to be placed (external to
LDA_e class). The clear_layout member function resets next_index to 0. The fitness function accepts an LDA_c 
chromosome variable, and calls the member function add_to_layout, once for each gene in the chromosome.

The add_shape_to_layout member function accepts a single shape_g object (called 'item') as input. The function
has a static data member:

		static array_index max_width_index		:	stores the width of the column currently being added to.
													The value of this variable is preserved between function calls.

The following algorithm determines the location to place the shape and stores both shape and location information 
in the layout array:


1.	Store 'item' in layout[next_index]
2.	If this is the first shape to be placed: 
		If the item height <= macro_height: 
			Don't update coordinates store in layout[0], as they are already (0,0)
			initialise max_width_index to 0 (refers to 0 element of layout array)
		else:	
			RETURN FAILURE as first piece is too large to fit on macro sheet
	else
		If the bottom edge of the shape layout[next_index-1] + height of item <= macro_height
			// Can fit shape in current column
			Set x position of layout[next_index] to be flush with left edge of layout[next_index-1]
			Set y position of layout[next_index] to be flush with bottom edge of layout[next_index-1]
			If the x position of the right edge of layout[next_index] > 
			   the x position of the right edge of layout[max_width_index]
			   Set max_width_index to next_index as shape just added has widened the current column of shapes
		else
			// Can't fit shape in current column, so make new column
			If the right edge of the shape layout[max_width_index] + width of item > macro_width
				RETURN FAILURE as shape is too wide to fit in a new column
			Else
				Set x position of layout[next_index] to be flush with right edge of layout[max_width_index]
				Set y position of layout[next_index] to top of macro sheet = 0
				Set max_width_index to next_index, which is the index of the shape just added.

	Increment next_index
	RETURN SUCCESS

Additional public member functions are provided for get / set macro_width and macro_height. Set_rule_regime and
get_rule_regime member functions are inactive. The init_chromosome member function takes an LDA_c chromosome as its
input by reference and sets the chromosome's genes to refer to the shape objects in the shapes array, preserving
shape order. The random_chromosome member function does the same operation, except shape order is random. **STILL
TO BE IMPLEMENTED**

LDA_new class (inherits from LDA_e class)

This class implements the advanced layout determining algorithm which uses 'edge profiles' to track placed-shape 
boundaries. Two profiles are used: the 'left profile' is observed parallel to the y-axis of the macro sheet, from a 
line lying at the rightmost edge of the macro sheet (corresponding to maximum x-axis value), in the direction towards
the leftmost edge of the macro sheet (towards x=0). The 'top profile' is observed parallel to the x-axis of the macro
sheet, from a line lying at the bottom edge of the macro sheet (corresponding to maxmium y-axis value), in the direction
towards the topmost edge of the macro sheet (towards y=0). 

Each profile consists of an ordered list of edges with each edge having an (x,y) coordinate determining location (called 
the edge's hotspot) and a length. Code for manipulating the left and top profiles use general algorithms which compute
in terms of 'parallel' and 'orthogonal' axis calculations. Manipulating the top profile involves the same algorithms as those
used for manipulating the left profile, except the meanings of parallel-axis and othogonal-axis are switched. The following
table summarises the axis mappings for the two types of profile:

				Parallel-axis	Orthogonal-axis

Left Profile	y-axis			x-axis

Top Profile		x-axis			y-axis

Both types of profile have their edges ordered in increasing value of the parallel-axis component of 'hotspot'. That is,
the left profile is ordered on increasing y-axis hotspot value and the top profile is ordered on increasing x-axis 
hotspot value. The edge length parameter is a scalar which describes how far an edge extends (beginning from hotspot) in 
the increasing parallel-axis direction.

I will describe the process of updating edge profiles by referring to the left profile in the particular case of a macro
sheet which has dimensions of 20 units across by 30 units down. Before the first shape is placed on the macro sheet, the 
left profile consists of one edge: (1) hotspot=(0,0), length=30. Consider a rectangle shape, with dimensions 10 units across
by 5 units down. Assume this shape has its top-left vertex placed at location (0,0). The left edge profile is updated and
now has two edges: (1) hotspot=(10,0), length=5; (2) hotspot=(0,5), length=25. 

We stipulate that placing shapes can only occur at locations where the top-left vertex is aligned with the parallel component
of the hotspot location of an edge. If the shape 'fits' into a gap in a profile, then its top-left vertex is also aligned 
with the orthogonal component of the same hotspot location. If there is no fit (due to gap in edge profile being too small) 
then the orthogonal component of the top-left vertex location is aligned with that of the following edge, which defines the 
gap which we failed to fit the shape into before. If the gap remains too small, then we move the orthogonal component to be 
aligned with that of the next edge in the profile. This is repeated until a fit is possible, or we find that the shape 
cannot be placed due to fixed macro sheet size.

Updating the top profile is equivalent, except the axes are swapped. When considering places to locate a shape, both profiles
are analysed for all valid placement locations. A rule regime is then used to determine which location to actually place 
the shape, for example, always place the shape at the leftmost location. Both left and top profiles have to be updated
in order to accommodate the new shape. The dimensions of the shape and its location are recorded in the 'layout' array,
stored in the LDA_e part of the LDA_new class.

The role of LDA_e base class:

Its main role is to provide an array of shape_g_l objects (these are shape gene objects with the addition of coord object
to describe location) in which the actual layout of objects can be stored and provide a fitness evaluating function. Layout
clearing and size setting and chromosome initialisation and randomizing are also performed here.

The operation of LDA_new class:

1) When an LDA_new object is created, the rule_regime is set to LEFTMOST. This means that, by default, shapes will be placed
at the leftmost location in the layout.

2) To evaluate the fitness of a particular chromosome, the fitness function of LDA_e class is called. This function provides
each gene (reference shape with orientation) to the add_to_layout function. After adding all shapes to the layout, in the
order determined by gene order in the chromosome, the function returns the effective usage of the macro sheet by the layout.
Also, the left and top profiles stored within LDA_new are valid and the layout array in LDA_e can be used to extract the
shape locations resulting from this chromosome, under the current rule regime.

3) The add_to_layout function is provided with a single shape to add to the layout and does the following:
	3.1) calls the function build_left_profile_places to store in the LDA_new left_places object all possible locations
	for the shape, calculated from the left profile.
	3.2) calls the function build_top_profile_places to store in the LDA_new top_places object all possible locations
	for the shape, calculated from the top profile.
	3.3) if the current placing rule is LEFTMOST, then call the function: choose_leftmost_place, else if the
	current placing rule is TOPMOST, then call the function: choose_topmost_place. Both these functions examine both
	left_places and top_places sets of locations to determine either the leftmost position (minimum x component of hotspot)
	or topmost position (minimum y component of hotspot) for the shape.
	3.4) The shape has its hotspot location set to that of the chosen location.
	3.5) The shape (with location) is stored in the layout array of shapes.
	3.6) The function add_shape_at_place is called with the parameter MODIFY_LEFT_PROFILE. This function updates the
	left profile to take account of the newly placed shape.
	3.7) The function add_shape_at_place is called with the parameter MODIFY_TOP_PROFILE. This function updates the
	top profile to take account of the newly placed shape.
	3.8) The function flip_placement_rule is called.

4) The build_left_profile_places and build_top_profile_places are nearly identical, except for swapped axes in the
two algorithms. I will describe the left_profile function. The function is supplied with the shape which is to be placed
and stores a set of coordinates in the member object: left_places, where the shape can be placed. 
	4.1) Search through all edges in the left profile beginning at the first edge. 
		4.1.1) Set the start edge pointer to the current edge.
		4.1.2) Set the abutting edge pointer to the current edge.
		4.1.3) Set the abutting offset to the x component of the hotspot of the start edge
		4.1.4) Set accumulated_length to 0.
		4.1.5) Loop through edges following start edge, until the accumulated edge length equals or exceeds the height of
		the shape:
			4.1.5.1) If the current edge juts further to the right than the abutting edge, update the abutting edge and
			abutting offset values to equal the current edge and the x component of the current edge hotspot respectively.
			4.1.6.2) Increase accumulated length by the length of the current edge.
		4.1.6) Determine if shape can be placed at the location described by: x_location stored in abutting offset
																			  y_location stored in hotspot.y_pos of start_edge
		       If the shape is neither to wide nor to high to fit at this location, add the hotspot coord to left_places.
			   If the current rule for placing is topmost then break out of the 4.1 loop, as the first location found is 
			   always topmost.

5) The choose_leftmost_place function returns the coord object corresponding to the leftmost location stored - both
left_places and top_places coord_group objects are searched. The choose_topmost_place function is identical except the
for swaped axes in the algorithm. I will describe the choose_leftmost_place function. The function is supplied with two
status values which range over SUCCESS or FAILURE in each, left_list_valid and top_list_valid. The first states whether the 
build_left_profile_places function found at least one place for the shape (SUCCESS if true), and the other states whether 
the build_top_profile_places function found at least one place for the shape (SUCCESS if true). If one of these is false,
then the corresponding places object is not searched.
	5.1) if no places in left_places
			Set chosen to left_places[0]
			FOR all elements of left_places array
				if current element has an x component of its hotspot < chosen x component of its hotspot
					Set chosen to current element
			If places are present in top_places
				If first place in top_places has x component of its hotspot < chosen x component of its hotspot
					Set chosen to top_places[0]
			RETURN CHOSEN
		ELSE
			RETURN top_places[0]

This function examines both left_places and top_places coord_group objects to find the leftmost location stored. It is
assumed that the leftmost coord stored in top_places is stored in element 0.

6) The function add_shape_at_place is the most important function in LDA_new class. 











	




































private data members
	coord_group left_places;
	ulist<edge_node> left_profile;

	coord_group top_places;
	ulist<edge_node> top_profile;

	placement_rule current_rule;
	placement_rule rule_regime;


Private member functions
	build_left_profile_places
	build_top_propfile_places

	choose_leftmost_place
	choose_topmost_places
	
	add_shape_at_place_6

	add_to_layout

	clear_layout

	flip_placement_rule
	restore_current_rule


Public member functions
	set_rule_regime
	get_rule_regime
	fitness